public class SomeService
{
	private readonly IUnitOfWork _uow;
    private readonly IRepository<SomeClass> _repo;
    
     public SomeService(IUnitOrWork unit, IRepository<SomeClass> repo)
    {
        _uow = unit;
        _repo = repo;
    }
    
    public void SomeMethod(SomeClass entity)
    {
        _repo.Add(entity);
        _uow.Commit();
        
    }
}

 public interface IUnitOfWork : IDisposable
    {
        IRepository<TEntity> GetRepository<TEntity>() where TEntity : class;
        
        int Commit();
    }

    public interface IUnitOfWork<TContext> : IUnitOfWork where TContext : DbContext
    {
        TContext Context { get; }
    }
	
	public interface IRepository<T> : IDisposable where T : class
    {
         IQueryable<T> Query(string sql, params object[] parameters);
        
        T Search(params object[] keyValues);
        
        T Single(Expression<Func<T, bool>> predicate = null,
            Func<IQueryable<T>, IOrderedQueryable<T>> orderBy = null,
            Func<IQueryable<T>, IIncludableQueryable<T, object>> include = null,
            bool disableTracking = true);
        
        void Add(T entity);
        void Add(params T[] entities);
        void Add(IEnumerable<T> entities);


        void Delete(T entity);
        void Delete(object id);
        void Delete(params T[] entities);
        void Delete(IEnumerable<T> entities);
        
        
        void Update(T entity);
        void Update(params T[] entities);
        void Update(IEnumerable<T> entities);
    }
	
	public class SomeService
{
	private readonly IUnitOfWork _uow;
      
    public SomeService(IUnitOrWork unit )
    {
        _uow = unit;
    }
    
    public void SomeMethod(SomeClass entity)
    {
        _uow.GetRepository<SomeClass>().Add(entity);
       _uow.Commit();
        
    }
}
