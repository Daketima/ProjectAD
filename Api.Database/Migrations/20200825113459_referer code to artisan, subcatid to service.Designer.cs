// <auto-generated />
using System;
using Api.Database.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Api.Database.Migrations
{
    [DbContext(typeof(projectadContext))]
    [Migration("20200825113459_referer code to artisan, subcatid to service")]
    partial class referercodetoartisansubcatidtoservice
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbAd")
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Api.Database.Model.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApprovalStatusId")
                        .HasColumnName("ApprovalStatusID");

                    b.Property<string>("ArticleBody")
                        .IsRequired()
                        .HasMaxLength(350)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateApproved")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalStatusId");

                    b.HasIndex("UserId")
                        .HasName("IX_Article_EmailAddress");

                    b.ToTable("Article");
                });

            modelBuilder.Entity("Api.Database.Model.Artisan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AboutMe")
                        .HasMaxLength(1500)
                        .IsUnicode(false);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<int>("AreaLocationId");

                    b.Property<int>("ArtisanCategoryId")
                        .HasColumnName("ArtisanCategoryID");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<string>("IdcardNo")
                        .HasColumnName("IDCardNo")
                        .HasMaxLength(40);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(13)
                        .IsUnicode(false);

                    b.Property<string>("PicturePath")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("RefererCode");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AreaLocationId");

                    b.HasIndex("ArtisanCategoryId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasName("EmailUnique");

                    b.ToTable("Artisan");
                });

            modelBuilder.Entity("Api.Database.Model.ArtisanCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("ArtisanCategories");
                });

            modelBuilder.Entity("Api.Database.Model.ArtisanServices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArtisanId");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Status")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("ArtisanId");

                    b.ToTable("ArtisanServices");
                });

            modelBuilder.Entity("Api.Database.Model.ArtisanSubCategory", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("CategoryId")
                        .HasColumnName("Category_Id");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Descr");

                    b.Property<string>("SubCategories")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ArtisanSubCategory");
                });

            modelBuilder.Entity("Api.Database.Model.AuditTrail", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Browser")
                        .HasMaxLength(70)
                        .IsUnicode(false);

                    b.Property<string>("CreatedTime")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Device")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Lat")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("Long")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("MacAddress")
                        .HasColumnName("Mac_address")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("Os")
                        .HasColumnName("OS")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AuditTrail");
                });

            modelBuilder.Entity("Api.Database.Model.BankCodeLov", b =>
                {
                    b.Property<string>("Bankcode")
                        .HasMaxLength(10);

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Bankcode");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("IX_BankCodeLOV");

                    b.ToTable("BankCodeLOV");
                });

            modelBuilder.Entity("Api.Database.Model.BankDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(110);

                    b.Property<int>("ArtisanId");

                    b.Property<string>("BankCode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Bvn")
                        .IsRequired()
                        .HasColumnName("BVN")
                        .HasMaxLength(11);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.ToTable("BankDetails");
                });

            modelBuilder.Entity("Api.Database.Model.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArtisanId");

                    b.Property<int>("ClienId");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Messages")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("MsgDate")
                        .HasColumnType("datetime");

                    b.Property<TimeSpan>("MsgTime");

                    b.Property<int?>("QuoteId");

                    b.Property<int?>("ServiceId")
                        .HasColumnName("ServiceID");

                    b.HasKey("Id");

                    b.HasIndex("ArtisanId")
                        .HasName("IX_Booking_ArtisanEmail");

                    b.HasIndex("ClienId")
                        .HasName("IX_Booking_ClientEmail");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("Api.Database.Model.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(13)
                        .IsUnicode(false);

                    b.Property<string>("PicturePath")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(70)
                        .IsUnicode(false);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasName("C_EmailUnique");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("Api.Database.Model.Complaint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateResolved")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<int>("EmailId");

                    b.Property<int>("StatusId")
                        .HasColumnName("StatusID");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("EmailId")
                        .HasName("IX_Complainant_ArtisanEmail");

                    b.HasIndex("StatusId")
                        .HasName("IX_Complainant_StatusID");

                    b.ToTable("Complaint");
                });

            modelBuilder.Entity("Api.Database.Model.Gallary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArtisanId");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Descr")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<DateTime>("JobDate")
                        .HasColumnType("datetime");

                    b.Property<string>("JobName")
                        .HasMaxLength(120)
                        .IsUnicode(false);

                    b.Property<string>("PicturePath")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("ProjectId");

                    b.HasKey("Id");

                    b.HasIndex("ArtisanId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Gallary");
                });

            modelBuilder.Entity("Api.Database.Model.Lga", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Lga1")
                        .IsRequired()
                        .HasColumnName("LGA")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("StateId");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("LGA");
                });

            modelBuilder.Entity("Api.Database.Model.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Area")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Lga")
                        .IsRequired()
                        .HasColumnName("LGA")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("StatusId");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("Api.Database.Model.Lov", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .IsUnique()
                        .HasName("UQ__ArticleS__3A15923FE8A1903C");

                    b.ToTable("LOV");
                });

            modelBuilder.Entity("Api.Database.Model.PaymentHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("money");

                    b.Property<int>("ArtisanId");

                    b.Property<int>("ClientId");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("PayDate")
                        .HasColumnType("date");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("ProjectId")
                        .HasColumnName("ProjectID");

                    b.HasKey("Id");

                    b.HasIndex("ArtisanId")
                        .HasName("IX_PaymentHistory_ArtisanEmail");

                    b.HasIndex("ClientId")
                        .HasName("IX_PaymentHistory_ClientEmail");

                    b.HasIndex("ProjectId");

                    b.ToTable("PaymentHistory");
                });

            modelBuilder.Entity("Api.Database.Model.Projects", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArtisanId");

                    b.Property<int>("ClientId");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(180)
                        .IsUnicode(false);

                    b.Property<int>("QuoteId");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("StatusId");

                    b.HasKey("Id");

                    b.HasIndex("ArtisanId");

                    b.HasIndex("ClientId");

                    b.HasIndex("QuoteId")
                        .HasName("IX_Projects_BookingID");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Api.Database.Model.Quote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("ArtisanId");

                    b.Property<int>("BookingId");

                    b.Property<int>("ClientId");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Descr")
                        .IsRequired()
                        .HasMaxLength(800)
                        .IsUnicode(false);

                    b.Property<decimal?>("Discount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(38, 2)")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Item")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<int>("OrderStatusId")
                        .HasColumnName("OrderStatus_Id");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(38, 2)");

                    b.Property<double>("Quantity");

                    b.Property<decimal?>("Vat")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VAT")
                        .HasColumnType("decimal(38, 2)")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Id");

                    b.HasIndex("ArtisanId")
                        .IsUnique()
                        .HasName("IX_Quote_ArtisanEmail");

                    b.HasIndex("BookingId")
                        .HasName("IX_Quote_ProjectID");

                    b.HasIndex("ClientId");

                    b.HasIndex("OrderStatusId");

                    b.ToTable("Quote");
                });

            modelBuilder.Entity("Api.Database.Model.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArtisanId");

                    b.Property<int>("ClientId");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("JobEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("JobStartDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ProjectId")
                        .HasColumnName("ProjectID");

                    b.Property<int>("Rating1")
                        .HasColumnName("Rating");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("ArtisanId")
                        .HasName("IX_Rating_ArtisanEmail");

                    b.HasIndex("ClientId")
                        .HasName("IX_Rating_ClientEmail");

                    b.HasIndex("ProjectId");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("Api.Database.Model.Services", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArtisanId");

                    b.Property<int?>("CategoryId");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Descriptions")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("LgaId");

                    b.Property<int?>("LocationId");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<int>("StatusId")
                        .HasColumnName("StatusID");

                    b.Property<int?>("SubCategoryId");

                    b.HasKey("Id");

                    b.HasIndex("ArtisanId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LgaId");

                    b.HasIndex("LocationId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Api.Database.Model.State", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("State");
                });

            modelBuilder.Entity("Api.Database.Model.UserLogin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<int>("RoleId")
                        .HasColumnName("RoleID");

                    b.Property<string>("SecurityStamp");

                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((4))");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasName("UQ__UserLogi__C9F284568AF4CB29");

                    b.ToTable("UserLogin");
                });

            modelBuilder.Entity("Api.Database.Model.UserRole", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RoleID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.HasKey("RoleId")
                        .HasName("PK_USERROLE");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Api.Database.Model.Article", b =>
                {
                    b.HasOne("Api.Database.Model.Lov", "ApprovalStatus")
                        .WithMany("Article")
                        .HasForeignKey("ApprovalStatusId")
                        .HasConstraintName("FK_Article_LOV");

                    b.HasOne("Api.Database.Model.UserLogin", "User")
                        .WithMany("Article")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Article_UserLogin");
                });

            modelBuilder.Entity("Api.Database.Model.Artisan", b =>
                {
                    b.HasOne("Api.Database.Model.Location", "AreaLocation")
                        .WithMany("Artisan")
                        .HasForeignKey("AreaLocationId")
                        .HasConstraintName("FK_Artisan_Location");

                    b.HasOne("Api.Database.Model.ArtisanCategories", "ArtisanCategory")
                        .WithMany("Artisan")
                        .HasForeignKey("ArtisanCategoryId")
                        .HasConstraintName("FK_Artisan_ArtisanCategories");
                });

            modelBuilder.Entity("Api.Database.Model.ArtisanServices", b =>
                {
                    b.HasOne("Api.Database.Model.Artisan", "Artisan")
                        .WithMany("ArtisanServices")
                        .HasForeignKey("ArtisanId")
                        .HasConstraintName("FK_ArtisanServices_Artisan");
                });

            modelBuilder.Entity("Api.Database.Model.AuditTrail", b =>
                {
                    b.HasOne("Api.Database.Model.UserLogin", "User")
                        .WithMany("AuditTrail")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_AuditTrail_Login");
                });

            modelBuilder.Entity("Api.Database.Model.Booking", b =>
                {
                    b.HasOne("Api.Database.Model.Artisan", "Artisan")
                        .WithMany("Booking")
                        .HasForeignKey("ArtisanId")
                        .HasConstraintName("FK_Booking_Artisan");

                    b.HasOne("Api.Database.Model.Client", "Clien")
                        .WithMany("Booking")
                        .HasForeignKey("ClienId")
                        .HasConstraintName("FK_Booking_Client");
                });

            modelBuilder.Entity("Api.Database.Model.Complaint", b =>
                {
                    b.HasOne("Api.Database.Model.Lov", "Status")
                        .WithMany("Complaint")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_Complainant_StatusTable");
                });

            modelBuilder.Entity("Api.Database.Model.Gallary", b =>
                {
                    b.HasOne("Api.Database.Model.Artisan", "Artisan")
                        .WithMany("Gallary")
                        .HasForeignKey("ArtisanId")
                        .HasConstraintName("FK_Gallary_Artisan");

                    b.HasOne("Api.Database.Model.Projects", "Project")
                        .WithMany("Gallary")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_Gallary_Projects");
                });

            modelBuilder.Entity("Api.Database.Model.Lga", b =>
                {
                    b.HasOne("Api.Database.Model.State", "State")
                        .WithMany("Lga")
                        .HasForeignKey("StateId")
                        .HasConstraintName("FK_LGA_State");
                });

            modelBuilder.Entity("Api.Database.Model.Location", b =>
                {
                    b.HasOne("Api.Database.Model.Lov", "Status")
                        .WithMany("Location")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_Location_LOV");
                });

            modelBuilder.Entity("Api.Database.Model.PaymentHistory", b =>
                {
                    b.HasOne("Api.Database.Model.Artisan", "Artisan")
                        .WithMany("PaymentHistory")
                        .HasForeignKey("ArtisanId")
                        .HasConstraintName("FK_PaymentHistory_Artisan");

                    b.HasOne("Api.Database.Model.Client", "Client")
                        .WithMany("PaymentHistory")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_PaymentHistory_Client");

                    b.HasOne("Api.Database.Model.Projects", "Project")
                        .WithMany("PaymentHistory")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_PaymentHistory_Projects");
                });

            modelBuilder.Entity("Api.Database.Model.Projects", b =>
                {
                    b.HasOne("Api.Database.Model.Artisan", "Artisan")
                        .WithMany("Projects")
                        .HasForeignKey("ArtisanId")
                        .HasConstraintName("FK_Projects_Artisan");

                    b.HasOne("Api.Database.Model.Client", "Client")
                        .WithMany("Projects")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_Projects_Client");

                    b.HasOne("Api.Database.Model.Quote", "Quote")
                        .WithMany("Projects")
                        .HasForeignKey("QuoteId")
                        .HasConstraintName("FK_Projects_Quote");
                });

            modelBuilder.Entity("Api.Database.Model.Quote", b =>
                {
                    b.HasOne("Api.Database.Model.Booking", "Booking")
                        .WithMany("Quote")
                        .HasForeignKey("BookingId")
                        .HasConstraintName("FK_Quote_Booking");

                    b.HasOne("Api.Database.Model.Client", "Client")
                        .WithMany("Quote")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_Quote_Client");

                    b.HasOne("Api.Database.Model.Artisan", "IdNavigation")
                        .WithOne("Quote")
                        .HasForeignKey("Api.Database.Model.Quote", "Id")
                        .HasConstraintName("FK_Quote_Artisan");

                    b.HasOne("Api.Database.Model.Lov", "OrderStatus")
                        .WithMany("Quote")
                        .HasForeignKey("OrderStatusId")
                        .HasConstraintName("FK__LOV_Quote");
                });

            modelBuilder.Entity("Api.Database.Model.Rating", b =>
                {
                    b.HasOne("Api.Database.Model.Artisan", "Artisan")
                        .WithMany("Rating")
                        .HasForeignKey("ArtisanId")
                        .HasConstraintName("FK_Rating_Artisan");

                    b.HasOne("Api.Database.Model.Client", "Client")
                        .WithMany("Rating")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_Rating_Client");

                    b.HasOne("Api.Database.Model.Projects", "Project")
                        .WithMany("Rating")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK__Rating__Project");
                });

            modelBuilder.Entity("Api.Database.Model.Services", b =>
                {
                    b.HasOne("Api.Database.Model.Artisan", "Artisan")
                        .WithMany("Services")
                        .HasForeignKey("ArtisanId")
                        .HasConstraintName("FK_Services_Artisan");

                    b.HasOne("Api.Database.Model.ArtisanCategories", "Category")
                        .WithMany("Services")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Services_Category");

                    b.HasOne("Api.Database.Model.Lga", "Lga")
                        .WithMany("Services")
                        .HasForeignKey("LgaId")
                        .HasConstraintName("FK_Services_LGA");

                    b.HasOne("Api.Database.Model.Location", "Location")
                        .WithMany("Services")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_Services_Location");

                    b.HasOne("Api.Database.Model.Lov", "Status")
                        .WithMany("Services")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK__Services__Status");

                    b.HasOne("Api.Database.Model.ArtisanSubCategory", "SubCategory")
                        .WithMany()
                        .HasForeignKey("SubCategoryId");
                });

            modelBuilder.Entity("Api.Database.Model.UserLogin", b =>
                {
                    b.HasOne("Api.Database.Model.UserRole", "Role")
                        .WithMany("UserLogin")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("UserLogin_fk0");

                    b.HasOne("Api.Database.Model.Lov", "Status")
                        .WithMany("UserLogin")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_UserLogin_LOV");
                });
#pragma warning restore 612, 618
        }
    }
}
